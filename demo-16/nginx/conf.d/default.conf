

server {
    listen 80;
    server_name localhost;

    location / {
        root /usr/share/nginx/html;
        index index.html;
    }
    error_page 404  /404.html;
}

#######################################################################################################
# resolver 10.0.0.1;

# upstream dynamic {
#     zone upstream_dynamic 64k;

#     server backend1.example.com      weight=5;
#     server backend2.example.com:8080 fail_timeout=5s slow_start=30s;
#     server 192.0.2.1                 max_fails=3;
#     server backend3.example.com      resolve;
#     server backend4.example.com      service=http resolve;

#     server backup1.example.com:8080  backup;
#     server backup2.example.com:8080  backup;
# }

# server {
#     location / {
#         proxy_pass http://dynamic;
#         health_check;
#     }
# }
#######################################################################################################
#weight(number)-sets the weight of the server, by default, 1.
#max_conns(number)-limits the maximum number of simultaneous active connections to the proxied server. 
#   Default value is zero, meaning there is no limit. If the server group does not reside in the shared memory, 
#   the limitation works per each worker process.
#   If idle keepalive connections, multiple workers, 
#   and the shared memory are enabled, 
#   the total number of active and idle connections to the proxied server may exceed the max_conns value.

#max_fails(number)-sets the number of unsuccessful attempts to communicate with the server that should happen 
#   in the duration set by the fail_timeout parameter to consider the server unavailable for a duration also 
#   set by the fail_timeout parameter. By default, the number of unsuccessful attempts is set to 1. 
#   The zero value disables the accounting of attempts. What is considered an unsuccessful attempt is defined by the 
#   proxy_next_upstream, fastcgi_next_upstream, uwsgi_next_upstream, scgi_next_upstream, memcached_next_upstream, 
#   and grpc_next_upstream directives.
#fail_timeout(time)-sets the time during which the specified number of unsuccessful attempts to communicate 
#     with the server should happen to consider the server unavailable;
#     and the period of time the server will be considered unavailable.
#     By default, the parameter is set to 10 seconds.
#backup-marks the server as a backup server. It will be passed requests when the primary servers are unavailable.
#     The parameter cannot be used along with the hash, ip_hash, and random load balancing methods.
#down-marks the server as permanently unavailable.

# resolve-monitors changes of the IP addresses that correspond to a domain name of the server, 
#     and automatically modifies the upstream configuration without the need of restarting nginx (1.5.12). 
#     The server group must reside in the shared memory.
#     In order for this parameter to work, the resolver directive must be specified in the http block 
#     or in the corresponding upstream block.

# route(string)-sets the server route name.
# service(name)-enables resolving of DNS SRV records and sets the service name (1.9.13). 
#     In order for this parameter to work, it is necessary to specify the resolve parameter for the server 
#     and specify a hostname without a port number.
#     If the service name does not contain a dot (“.”), 
#     then the RFC-compliant name is constructed and the TCP protocol is added to the service prefix. 
#     For example, to look up the _http._tcp.backend.example.com SRV record, it is necessary to specify the directive: